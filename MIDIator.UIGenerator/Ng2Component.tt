<#@ template language="C#" #>
<#@ import namespace="Consumables" #> 
<#@ import namespace="MIDIator.UIGeneration" #> 
<#@ import namespace="System.Linq" #> 
<#@ parameter type="TypeLite.TsModels.TsClass" name="BaseType" #>
<#@ parameter type="System.Collections.Generic.List<ImportDirective>" name="ImportDirectives" #>
<# ImportDirectives.ForEach(directive =>{#>import<#if (directive.Classes.Any()){#> { <#=string.Join(", ", directive.Classes)#> } from<#}#> '<#=directive.Module#>';
<#}); #>

@Component({
	selector: '<#=BaseType.Name.ToCamelCase()#>',
	templateUrl: './<#=BaseType.Name.ToCamelCase()#>.component.html'
})

export class <#=BaseType.Name#>Component {
	private current<#=BaseType.Name#>: <#=BaseType.Name#>;
	
	@Input() set <#=BaseType.Name.ToCamelCase()#>(in<#=BaseType.Name#>: <#=BaseType.Name#>){
		this.current<#=BaseType.Name#> = in<#=BaseType.Name#>;
		this.<#=BaseType.Name.ToCamelCase()#>Change.emit(in<#=BaseType.Name#>); 
	}
	get <#=BaseType.Name.ToCamelCase()#>() : <#=BaseType.Name#> {
		return this.current<#=BaseType.Name.ToCamelCase()#>; 
	}
	
	@Output() <#=BaseType.Name.ToCamelCase()#>Change: EventEmitter<<#=BaseType.Name#>> = new EventEmitter<<#=BaseType.Name#>>();	
}